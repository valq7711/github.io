define([], function(){ return {"files":{"1542501841334":{"id":"1542501841334","name":"__init__.pyj","parent":"1542501757439","content":"","ctime":1542501841334,"mtime":1542501841334},"1542501849655":{"id":"1542501849655","name":"rs_vue.pyj","parent":"1542501757439","content":"#rs_vue.pyj\n\ndef unpack_name_fun_opt(f_reg_as):\n    def unpacker(reg_as, name_fun_opt, opt):\n        if not name_fun_opt:\n            raise Error('Attempt to call V_Collector @decorator with empty `()`')\n\n        self = this\n        arg1type = type(name_fun_opt)\n        # Simple call:  @decor\n        if arg1type.startsWith('Fun'):\n            return f_reg_as.call(self, reg_as, name_fun_opt.name, name_fun_opt)\n        # Factory call: @decor('name') or  @decor('name', {}) or @decor({})\n        else:\n            return def(f):\n                nonlocal opt\n                # @decor('name') or  @decor('name', {})\n                # if name_fun_opt is String then use it as name\n                if arg1type.startsWith('Str'):\n                    name = name_fun_opt\n                    if opt:\n                        opt.handler = f\n                    else:\n                        opt = f\n                # @decor({})\n                else:\n                    opt = name_fun_opt\n                    name = f.name\n                    opt.handler = f\n                return f_reg_as.call(self, reg_as, name, opt)\n    return unpacker\n\n\nclass V_collector:\n    def __init__(self):\n        self._methods = None\n        self._computed = None\n        self._watch = None\n        self._filters = None\n        self._directives = None\n\n    @unpack_name_fun_opt\n    def _reg_as(self, reg_as, name, fun_opt):\n        print('reg '+ reg_as + ' ' + name + ' self: ', self)\n        if not self[reg_as]:\n            self[reg_as] = {}\n        self[reg_as][name] = fun_opt\n        return fun_opt.handler ? fun_opt.handler : fun_opt\n\n    def meth(self, name_or_fun):       return self._reg_as('_methods', name_or_fun)\n    def computed(self, name_or_fun):   return self._reg_as('_computed', name_or_fun)\n    def filter(self, name_or_fun):     return self._reg_as('_filters', name_or_fun)\n    def directive(self, name_or_fun):  return self._reg_as('_directives', name_or_fun)\n    def watch(self, name_or_fun, opt): return self._reg_as('_watch', name_or_fun, opt)\n\nclass RS_vue_n:\n    def __init__(self, v_collector):\n        self.props = {}\n        self.data = self._init_data\n\n        self.methods = v_collector._methods\n        self.computed = v_collector._computed\n        self.directives = v_collector._directives\n        self.filters = v_collector._filters\n        self.watch = v_collector._watch\n\n        self_keys = Object.keys(self)\n        for v_spec in [ 'beforeCreate','created',\n                        'beforeMount', 'mounted',\n                        'beforeUpdate', 'updated',\n                        'activated', 'deactivated',\n                        'beforeDestroy', 'destroyed']:\n            if !(v_spec in self_keys) and (tmp = self.__proto__[v_spec]):\n                self[v_spec] = tmp\n\n    def _init_data(self):\n        raise ReferenceError('Not implemented')\n","ctime":1542501849655,"mtime":1542766973057},"1542652234075":{"id":"1542652234075","name":"app.vuepy","parent":"1542652213700","content":"'<!DOCTYPE html>'\nhtml(lang=\"en\"):\n    head:\n        meta( charset=\"utf-8\"):\n        title:\n            'vuepy chat example'\n        link( href=\"https://fonts.googleapis.com/css?family=Muli\", rel=\"stylesheet\", type=\"text/css\"):\n        link( href=\"/static/css/chat.css\", rel=\"stylesheet\", type=\"text/css\", data-dynamic='true'):\n        script(src=\"../static/js/vue.js\", type=\"text/javascript\"):\n        script(src = '/static/js/app.js', type='text/javascript', data-dynamic = 'true'):\n\n    body:\n        div(style = 'text-align: center;'):\n            h2: a(href = 'https://github.com/vuejs/vuex/tree/dev/examples/chat'):\n                'Original written by Evan You'\n        div(id=\"app\"):\n            'What is going on?'\n\n\nv-def app_templ:\n    div(class=\"chatapp\"):\n        thread-section:\n        message-section:\n\nv-pyj:\n\n    import components.thread_section as thread_section, components.message_section as message_section\n    from store.vuepy_store import Store\n\n    # init state\n    state = {\n      current_threadID: None,\n      threads: {\n\n      },\n      messages: {\n\n      }\n    }\n\n    # mount Store\n    Vue.use(Store)\n    store = window.store = Store(state) # so you can play with the store in the console\n    Vue.component('ThreadSection', thread_section.make())\n    App = {\n        name: 'App',\n        delimiters: ['${', '}'],\n        template : app_templ,\n        components: {\n            ThreadSection: thread_section.make(),\n            MessageSection: message_section.make()\n        }\n    }\n\n    Vue.filter('time', def(timestamp):\n        return new Date(timestamp).toLocaleTimeString();\n    )\n\n    # GO!\n    document.addEventListener('readystatechange',def():\n            if document.readyState == 'complete':\n                window.app = new Vue({\n                el: '#app',\n                store: store,\n                render: def(h): return h(App);\n            })\n            store.get_all_messages()\n            print('done!')\n    )\n\n\n\n","ctime":1542652234076,"mtime":1542830997884},"1542652479506":{"id":"1542652479506","name":"mock_data.pyj","parent":"1542652464883","content":"data = [\n  {\n    id: 'm_1',\n    threadID: 't_1',\n    threadName: 'Jing and Bill',\n    authorName: 'Bill',\n    text: 'Hey Jing, want to give a Flux talk at ForwardJS?',\n    timestamp: Date.now() - 99999\n  },\n  {\n    id: 'm_2',\n    threadID: 't_1',\n    threadName: 'Jing and Bill',\n    authorName: 'Bill',\n    text: 'Seems like a pretty cool conference.',\n    timestamp: Date.now() - 89999\n  },\n  {\n    id: 'm_3',\n    threadID: 't_1',\n    threadName: 'Jing and Bill',\n    authorName: 'Jing',\n    text: 'Sounds good.  Will they be serving dessert?',\n    timestamp: Date.now() - 79999\n  },\n  {\n    id: 'm_4',\n    threadID: 't_2',\n    threadName: 'Dave and Bill',\n    authorName: 'Bill',\n    text: 'Hey Dave, want to get a beer after the conference?',\n    timestamp: Date.now() - 69999\n  },\n  {\n    id: 'm_5',\n    threadID: 't_2',\n    threadName: 'Dave and Bill',\n    authorName: 'Dave',\n    text: 'Totally!  Meet you at the hotel bar.',\n    timestamp: Date.now() - 59999\n  },\n  {\n    id: 'm_6',\n    threadID: 't_3',\n    threadName: 'Functional Heads',\n    authorName: 'Bill',\n    text: 'Hey Brian, are you going to be talking about functional stuff?',\n    timestamp: Date.now() - 49999\n  },\n  {\n    id: 'm_7',\n    threadID: 't_3',\n    threadName: 'Bill and Brian',\n    authorName: 'Brian',\n    text: 'At ForwardJS?  Yeah, of course.  See you there!',\n    timestamp: Date.now() - 39999\n  }\n]","ctime":1542652479506,"mtime":1542652585779},"1542652644307":{"id":"1542652644307","name":"__init__.pyj","parent":"1542652464883","content":"","ctime":1542652644307,"mtime":1542652647003},"1542652825827":{"id":"1542652825827","name":"api.pyj","parent":"1542652464883","content":"from .mock_data import data\n\nLATENCY = 16\n\ndef get_all_messages(cb):\n    setTimeout(def():  cb(data);, LATENCY)\n\n\ndef create_message( text_thread, cb):\n    timestamp = Date.now()\n    id = 'm_' + timestamp\n    message = {\n        id: id,\n        text: text_thread.text,\n        timestamp: timestamp,\n        threadID: text_thread.thread.id,\n        threadName: text_thread.thread.name,\n        authorName: 'Evan'\n    }\n    setTimeout(def(): cb(message);, LATENCY)\n","ctime":1542652825827,"mtime":1542727316435},"1542653917420":{"id":"1542653917420","name":"message.vuepy","parent":"1542653895308","content":"v-def templ:\n    li(class=\"message-list-item\" ):\n        h5(class=\"message-author-name\" ): '${ message.authorName }'\n        div(class=\"message-time\"):        '${ message.timestamp | time }'\n        div(class=\"message-text\"):        '${ message.text }'\n\nv-pyj:\n    def make():\n        return {\n          delimiters: ['${', '}'],\n          template: templ,\n          name: 'Message',\n          props: {\n            message: Object\n          }\n        }\n","ctime":1542653917420,"mtime":1542810308851},"1542654184124":{"id":"1542654184124","name":"message_section.vuepy","parent":"1542653895308","content":"\nv-def templ:\n    div(class=\"message-section\"):\n        h3( class=\"message-thread-heading\"):\n            '${ thread.name }'\n        ul( class=\"message-list\",  ref=\"list\"):\n            message(\n                v-for = \"message in messages\",\n                :key = \"message.id\",\n                :message =\"message\"):\n        textarea(\n          class = \"message-composer\",\n          v-model = \"text\",\n          @keyup.enter = \"send_message\"):\n\nv-pyj:\n    import .message\n    from asset.rs_vue import V_collector, RS_vue_n\n\n    vc = V_collector()\n\n    class Script(RS_vue_n):\n        def __init__(self):\n            RS_vue_n.__init__(self, vc)\n            self.delimiters = ['${', '}']\n            self.template = templ\n            self.name = 'MessageSection'\n            self.components = { message: message.make() }\n            self.map_store =  {\n                thread: 'current_thread',\n                messages: 'sorted_messages',\n                send_message: self.send_message\n            }\n\n        def _init_data(self):\n            return {\n                  text: ''\n            }\n\n        # included in map_store, so the @decoration is not required\n        def send_message(self, dispatch):\n            text, thread  =  self.text, self.thread\n            if (text.trim()):\n                dispatch('send_message',\n                         { text: text, thread: thread})\n                self.text = ''\n\n        @vc.watch('thread.lastMessage')\n        def last_message(self):\n            self.$nextTick(def():\n                ul = self.$refs.list\n                ul.scrollTop = ul.scrollHeight;\n            )\n\n\n    def make():\n        return Script()\n","ctime":1542654184124,"mtime":1542811213611},"1542661139493":{"id":"1542661139493","name":"thread.vuepy","parent":"1542653895308","content":"v-def templ:\n    li(\n         class = \"thread-list-item\",\n        :class = \"{ active: active }\",\n        @click = \"\\$emit('switch-thread', thread.id)\"\n            ):\n        h5(  class = \"thread-name\"): '${ thread.name }'\n        div( class = \"thread-time\"): '${ thread.last_message.timestamp | time }'\n        div( class = \"thread-last-message\"): '${ thread.last_message.text }'\n\nv-pyj:\n    def make():\n        return {\n            name: 'Thread',\n            delimiters: ['${', '}'],\n            template : templ,\n            props: {\n                thread: Object,\n                active: Boolean\n            }\n        }\n","ctime":1542661139493,"mtime":1542810572531},"1542661973701":{"id":"1542661973701","name":"thread_section.vuepy","parent":"1542653895308","content":"v-def templ:\n    div(class = \"thread-section\"):\n        div( class = \"thread-count\"):\n            span(v-show = \"unread_count\"):\n                'Unread threads: ${ unread_count }'\n        ul( class = \"thread-list\"):\n            thread(\n                v-for = \"thread in threads\",\n                :key = \"thread.id\",\n                :thread = \"thread\",\n                :active = \"thread.id === current_thread.id\",\n                @switch-thread = \"switch_thread\"\n            ):\n\nv-pyj:\n    import .thread\n\n    def make():\n        return {\n            delimiters: ['${', '}'],\n            name: 'ThreadSection',\n            template : templ,\n            components: { thread: thread.make() },\n            map_store: [\n                'threads', 'current_thread', 'unread_count',\n                'switch_thread'\n            ]\n        }\n","ctime":1542661973701,"mtime":1542810507259},"1542662271813":{"id":"1542662271813","name":"app.vuepy","parent":"1542653895308","content":"#v-css(store_in = 'chat.css'):\n\nv-def templ:\n    div(class=\"chatapp\"):\n        thread-section:\n        message-section:\n\nv-pyj:\n    import .thread_section, .message_section\n    App = {\n        name: 'App',\n        template : templ,\n        components: {\n            ThreadSection: thread_section.make(),\n            MessageSection: message_section.make()\n        }\n    }\n\n","ctime":1542662271813,"mtime":1542662306267},"1542672799069":{"id":"1542672799069","name":"__init__.pyj","parent":"1542663611604","content":"","ctime":1542672799069,"mtime":1542652647003},"1542762557242":{"id":"1542762557242","name":"vuepy_store.pyj","parent":"1542663611604","content":"import api.api as api\nfrom asset.rs_vue import V_collector, RS_vue_n\n\nvc = V_collector()\n\ndef get_vctx(ctx):\n    return ctx.state_getters ? ctx.state_getters : ctx\n\nclass State_api(RS_vue_n):\n    def __init__(self, vue, state):\n        RS_vue_n.__init__(self, vc)\n        self.vue = vue\n        self.state_getters = new vue({\n            data : {state: state},\n            computed : self.computed\n        })\n        self.state = self.state_getters.state\n        self.getters = {}\n        # small hack to extract getters\n        get_prop = Object.getOwnPropertyDescriptor\n        for getter_name in self.computed:\n            self.getters[getter_name] = \\\n                get_prop(self.state_getters, getter_name).get\n\n\n\n\n    @vc.computed\n    def threads(self):\n        self = get_vctx(self)\n        return self.state.threads\n\n    @vc.computed\n    def current_thread(self):\n        self = get_vctx(self)\n        return (ct = self.state.current_threadID) \\\n            ? self.state.threads[ct] \\\n            : {}\n\n    @vc.computed\n    def current_messages(self):\n        self = get_vctx(self)\n        thread = self.current_thread\n        return thread.messages \\\n            ? thread.messages.map(def(id): return self.state.messages[id];) \\\n            : []\n\n    @vc.computed\n    def unread_count(self):\n        self = get_vctx(self)\n        threads = self.threads\n        return Object.keys(threads).reduce(\n                def(count, id):\n                    return threads[id].last_message.isRead \\\n                        ? count \\\n                        : count + 1;\n                ,0)\n\n\n    @vc.computed\n    def sorted_messages(self):\n        self = get_vctx(self)\n        messages = self.current_messages\n        return messages[:].sort(def(a, b): return a.timestamp - b.timestai;)\n\n    # mutations\n    @vc.meth\n    def receive_all(self, messages):\n        state = self.state\n        latest_message = None\n        for message in messages:\n            # create new thread if the thread doesn't exist\n            if not state.threads[message.threadID]:\n                self.create_thread(message.threadID, message.threadName)\n\n            #mark the latest message\n            if not latest_message or message.timestamp > latest_message.timestamp:\n                latest_message = message\n                # add message\n                self.receive_message(message)\n\n        # set initial thread to the one with the latest message\n        self.switch_thread(latest_message.threadID)\n\n    @vc.meth\n    def receive_message(self, message):\n        # add a `isRead` field before adding the message\n        message.isRead = message.threadID is self.state.current_threadID\n        # add it to the thread it belongs to\n        thread = self.state.threads[message.threadID]\n        if not thread.messages.some(def(id): return id is message.id;):\n            thread.messages.push(message.id)\n            thread.last_message = message\n        #add it to the messages map\n        self.vue.set(self.state.messages, message.id, message)\n\n    @vc.meth\n    def switch_thread(self, id):\n        self.state.current_threadID = id\n        if not self.state.threads[id]:\n            debugger\n        # mark thread as read\n        self.state.threads[id].last_message.isRead = True\n\n    @vc.meth\n    def create_thread(self, id, name):\n        self.vue.set(\n            self.state.threads, id,\n            {\n                id: id,\n                name: name,\n                messages: [],\n                last_message: None\n            }\n        )\n\n\nclass Store:\n    def __init__(self, state):\n        if not self.vue:\n            raise ReferenceError('You should first call Vue.use(Store)')\n\n        vue = self.vue\n        #vue.prototype.$rstore = self\n        self.state_api = State_api(vue, state)\n        self.action_keys = Object.getOwnPropertyNames(self.__proto__)\\\n                .filter(def(k): return !(k in ['commit', 'dispatch', 'constructor']);)\n\n        self.dispatch_bound = def():\n            self.dispatch.apply(self, arguments);\n\n\n    def commit(self, mutation, *payload):\n        print('mutation: ', mutation)\n        print('\\tpayload: ',  payload)\n        if (h = self.state_api.methods[mutation]):\n            h.apply(self.state_api, payload)\n        else:\n            raise Error('unknown mutation: ' + mutation)\n\n    def dispatch(self, action, *payload):\n        print('action: ', action)\n        print('\\tpayload: ',  payload)\n        if not action in self.action_keys:\n            raise Error('unknown action: ' + action)\n        self[action].apply(self, payload)\n\n    def get_all_messages(self):\n        print('api', api)\n        api.get_all_messages(def(messages):\n            self.commit('receive_all', messages);\n        )\n\n\n    def send_message(self, payload):\n        api.create_message(payload, def(message): self.commit('receive_message', message);)\n\n    def switch_thread(self, payload):\n        self.commit('switch_thread', payload)\n\n\n    @staticmethod\n    def before_create():\n        map_store = 'map_store'\n        $opts = this.$options\n\n        #!don't replace with map_store in ...\n        if not $opts[map_store]:\n            return\n        self = $opts.store or this.$root.$options.store\n        if not self:\n            raise ReferenceError('Store not found')\n\n        for opt in ['methods', 'computed']:\n            if not $opts[opt]:\n                $opts[opt] = {}\n\n        $map_opts = $opts[map_store]\n        if Array.isArray($map_opts):\n            $map_opts = { k:k for k in $map_opts}\n\n        for map_to in $map_opts:\n            map_from = $map_opts[map_to]\n            if type(map_from).startsWith('Fun'):\n                $opts['methods'][map_to] = def():\n                    map_from.call(this, self.dispatch_bound, *arguments);\n            elif map_from in self.action_keys:\n                $opts['methods'][map_to] = def():\n                    self.dispatch.call(self, map_from, *arguments)\n            elif map_from in self.state_api.methods:\n                $opts['methods'][map_to] = def():\n                    self.commit.call(self, map_from, *arguments)\n            elif map_from in self.state_api.getters:\n                $opts['computed'][map_to] = self.state_api.getters[map_from]\n            else:\n                raise ReferenceError('unknown value in `map_store`: ' + map_from)\n\n    @staticmethod\n    def install(Vue, opt):\n        Store.prototype.vue = Vue\n        Vue.mixin({ beforeCreate: Store.before_create })\n\n\n\n\nif __name__ == '__main__':\n    pass","ctime":1542762557242,"mtime":1542831410791},"1542763249227":{"id":"1542763249227","name":"chat.css","parent":"1542473406157","content":"    /**\n     * This file is provided by Facebook for testing and evaluation purposes\n     * only. Facebook reserves all rights not expressly granted.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n     * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\n     * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n     * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n     */\n\n    .chatapp {\n      font-family: 'Muli', 'Helvetica Neue', helvetica, arial;\n      max-width: 760px;\n      margin: 20px auto;\n      overflow: hidden;\n    }\n\n    .message-list, .thread-list {\n      border: 1px solid #ccf;\n      font-size: 16px;\n      height: 400px;\n      margin: 0;\n      overflow-y: auto;\n      padding: 0;\n    }\n\n    .message-section {\n      float: right;\n      width: 65%;\n    }\n\n    .thread-section {\n      float: left;\n      width: 32.5%;\n    }\n\n    .message-thread-heading,\n    .thread-count {\n      height: 40px;\n      margin: 0;\n    }\n\n    .message-list-item, .thread-list-item {\n      list-style: none;\n      padding: 12px 14px 14px;\n    }\n\n    .thread-list-item {\n      border-bottom: 1px solid #ccc;\n      cursor: pointer;\n    }\n\n    .thread-list:hover .thread-list-item:hover {\n      background-color: #f8f8ff;\n    }\n\n    .thread-list:hover .thread-list-item {\n      background-color: #fff;\n    }\n\n    .thread-list-item.active,\n    .thread-list:hover .thread-list-item.active,\n    .thread-list:hover .thread-list-item.active:hover {\n      background-color: #efefff;\n      cursor: default;\n    }\n\n    .message-author-name,\n    .thread-name {\n      color: #66c;\n      float: left;\n      font-size: 13px;\n      margin: 0;\n    }\n\n    .message-time, .thread-time {\n      color: #aad;\n      float: right;\n      font-size: 12px;\n    }\n\n    .message-text, .thread-last-message {\n      clear: both;\n      font-size: 14px;\n      padding-top: 10px;\n    }\n\n    .message-composer {\n      box-sizing: border-box;\n      font-family: inherit;\n      font-size: 14px;\n      height: 5em;\n      width: 100%;\n      margin: 20px 0 0;\n      padding: 10px;\n    }\n","ctime":1542763249227,"mtime":1542761228358},"1542764441060":{"id":"1542764441060","name":"__init__.pyj","parent":"1542653895308","content":"","ctime":1542764441060,"mtime":1542764444533},"1542813101174":{"id":"1542813101174","name":"README","parent":"0","content":"0. Open browser console\n1. Click *Explorer* and open /vuepy/chat/app.vuepy\n2. Press Ctrl-F9\n3. Go to /views/chat and try app.html by click on the red-play-icon (see on the right)\n\n---------- Editor Hotkeys ----------------\n\nCtrl-Space   - autocomplete (lang specific)\nCtrl-Enter   - hint anyword (scan +/- 500 words ... or 250)\nTab          - indentMore\nShift-Tab    - indentLess\nCtrl-O       - open\nCtrl-S       - save\nCtrl-Alt-S   - save as\nCtrl-D       - close\nShift-Ctrl-C - new\nCtrl-F9      - compile\nAlt-V        - Vim mode on/off","ctime":1542813101175,"mtime":1542830614244}},"dirs":{"0":{"id":0,"name":"","parent":null,"content":["1542473391308","1542473427256","1542473450305","1542813101174"]},"1542473391308":{"id":"1542473391308","name":"static","parent":"0","content":["1542473397824","1542473406157"]},"1542473397824":{"id":"1542473397824","name":"js","parent":"1542473391308","content":[]},"1542473406157":{"id":"1542473406157","name":"css","parent":"1542473391308","content":["1542763249227"]},"1542473427256":{"id":"1542473427256","name":"views","parent":"0","content":["1542652303557"]},"1542473450305":{"id":"1542473450305","name":"vuepy","parent":"0","content":["1542501757439","1542652213700"]},"1542501757439":{"id":"1542501757439","name":"asset","parent":"1542473450305","content":["1542501841334","1542501849655"]},"1542652213700":{"id":"1542652213700","name":"chat","parent":"1542473450305","content":["1542652234075","1542652464883","1542653895308","1542663611604"]},"1542652303557":{"id":"1542652303557","name":"chat","parent":"1542473427256","content":[]},"1542652464883":{"id":"1542652464883","name":"api","parent":"1542652213700","content":["1542652479506","1542652644307","1542652825827"]},"1542653895308":{"id":"1542653895308","name":"components","parent":"1542652213700","content":["1542653917420","1542654184124","1542661139493","1542661973701","1542662271813","1542764441060"]},"1542663611604":{"id":"1542663611604","name":"store","parent":"1542652213700","content":["1542672799069","1542762557242"]}},"last_id":1542814200552};
});
